import random
import numpy as np
from groupy.garray.Ot_array import OtArray
from groupy.garray.Z3_array import Z3Array
from groupy.garray.finitegroup import FiniteGroup
from groupy.garray.matrix_garray import MatrixGArray

"""
Implementation of finite group O, the group of octahedral symmetry.
Group O represents the 24 symmetries of a octahedron and can be constructed
by combining its generators (90 degree rotation over the x- and y-axis).

All elements belonging to the group are generated by self.get_elements(),
and saved to a list (self.elements). Because O is not commutative, 
it cannot simply be parameterised in terms of number of times the generators 
are combined. Therefore, the int representation is the index of the transformation
in the list of elements generated at initialisation of this class. 
"""


class OArray(MatrixGArray):
    parameterizations = ['int', 'mat', 'hmat']
    _g_shapes = {'int': (1,), 'mat': (3, 3), 'hmat': (4, 4)}
    _left_actions = {}
    _reparameterizations = {}
    _group_name = 'O'

    def __init__(self, data, p='int'):
        data = np.asarray(data)
        assert data.dtype == np.int

        # classes OArray can be multiplied with
        self._left_actions[OArray] = self.__class__.left_action_hmat
        self._left_actions[OtArray] = self.__class__.left_action_hmat
        self._left_actions[Z3Array] = self.__class__.left_action_vec

        super(OArray, self).__init__(data, p)
        self.elements = self.get_elements()

    def mat2int(self, mat_data):
        '''
        Transforms 3x3 matrix representation to int representation.
        To handle any size and shape of mat_data, the original mat_data
        is reshaped to a long list of 3x3 matrices, converted to a list of
        int representations, and reshaped back to the original mat_data shape.
        '''

        input = mat_data.reshape((-1, 3, 3))
        data = np.zeros((input.shape[0], 1), dtype=np.int)
        for i in range(input.shape[0]):
            mat = input[i]
            index = self.elements.index(mat.tolist())
            data[i, 0] = index
        data = data.reshape(mat_data.shape[:-2] + (1,))
        return data

    def int2mat(self, int_data):
        '''
        Transforms integer representation to 3x3 matrix representation.
        Original int_data is flattened and later reshaped back to its original
        shape to handle any size and shape of input.
        '''
        i = int_data[..., 0].flatten()
        data = np.zeros((len(i),) + (3, 3), dtype=np.int)

        for j in range(len(i)):
            mat = self.elements[i[j]]
            data[j, 0:3, 0:3] = mat

        data = data.reshape(int_data.shape[:-1] + (3, 3))
        return data

    def get_elements(self):
        '''
        Function to generate a list containing all 24 elements of
        group O. This list is necessary for the integer representation:
        the index of an element in this list represents the group element.

        Elements are stored as lists rather than numpy arrays to enable
        lookup through self.elements.index(x) and sorting.

        Basic principle to find all elements in the list:
            specify the generators (rotations over x and y axis)
            while not all elements have been found, repeat:
                choose random element from current list of elements as multiplier
                multiply this element with the last found element
                if this element is new, add it to the list of elements.
        '''
        # specify generators
        g1 = [[1, 0, 0], [0, 0, -1], [0, 1, 0]]  # 90o degree rotation over x
        g2 = [[0, 0, 1], [0, 1, 0], [-1, 0, 0]]  # 90o degree rotation over y
        # initialise element list
        element_list = [g1, g2]
        current = g1
        while len(element_list) < 24:
            multiplier = random.choice(element_list)
            current = np.dot(np.array(current), np.array(multiplier)).tolist()
            if current not in element_list:
                element_list.append(current)
        element_list.sort()
        return element_list


class OGroup(FiniteGroup, OArray):
    def __init__(self):
        OArray.__init__(
            self,
            data=np.arange(24)[:, None],  # 24 elements
            p='int'
        )
        FiniteGroup.__init__(self, OArray)

    def factory(self, *args, **kwargs):
        return OArray(*args, **kwargs)


O = OGroup()


def rand(size=()):
    '''
    Returns an OArray of shape size, with randomly chosen elements in int parameterization.
    '''
    data = np.zeros(size + (1,), dtype=np.int64)
    data[..., 0] = np.random.randint(0, 24, size)
    return OArray(data=data, p='int')


def identity(p='int'):
    '''
    Returns the identity element: a matrix with 1's on the diagonal.
    '''
    li = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    e = OArray(data=np.array(li, dtype=np.int), p='mat')
    return e.reparameterize(p)
